import pickle

def login(users): #function returns instance of admin or user depending upon the given data and takes list of instances of user to varify credentials
    while True:
        username = input("Enter username: ")
        password = input("Enter password: ")
        for user in users:
            if isinstance(user, User) and user.username == username and user.password == password:
                if user.username == "admin":
                    admin = Admin(username, password, user.conf_question, user.conf_answer)
                    return admin
                return user
        print("Login failed")

def signup(users): #creates an instance of user and saves it in the user instances list file
    while True:
        username = input("Enter username: ")
        if any(user.username == username for user in users):
            print("Username already exists. Try another one.")
            continue
        password = input("Enter password: ")
        conf_password = input("Confirm password: ")
        conf_question = input("Enter confirmation question: ")
        conf_answer = input("Enter confirmation answer: ")
        if conf_password != password:
            print("Passwords do not match. Try again.")
            continue
        new_user = User(username, password, conf_question, conf_answer)
        users.append(new_user)
        save_users(users)
        print("Sign up successful")
        break

def load_users(): #returns user instance list file if it exists via unpickling and try except
    try:
        with open("user/users.txt", "rb") as f:
            users = pickle.load(f)
            return users
    except FileNotFoundError:
        return []

def load_screens(): #returns screen instance list file if it exists via unpickling and try except 
    try:
        with open("screen/screens.txt", "rb") as f:
            screens = pickle.load(f)
            return screens
    except FileNotFoundError:
        return []

def save_users(users): #dumps the list of instances loaded into user instance list file
    try:
        with open("user/users.txt", "wb") as f:
            pickle.dump(users, f)
    except Exception as e:
        print("Error saving users:", e)

def save_screens(screens): #dumps the list of instances loaded into screens instance list file
    try:
        with open("screen/screens.txt", "wb") as f:
            pickle.dump(screens, f)
    except Exception as e:
        print("Error saving screens:", e)

def forgot_password(users): #prints the password of a user via verification Q/a method
    username=input("Enter username: ")
    for user in users:
            if user.username == username:
                break
    print(user.conf_question)
    answer=input("Enter answer: ")
    if answer==user.conf_answer:
        print("Your password is: ",user.password)
    else:
        print("Wrong answer")

class User: #class user defined with its attributes
    def __init__(self,username,password,conf_question,conf_answer):
        self.username=username
        self.password=password
        self.conf_question=conf_question
        self.conf_answer=conf_answer
        self.bookings=[]

    def display_shows(self): #creates a dictionary of shows where the key is the screen id and the value is the list of shows present with in that screen and prints them out in a readable manner
        screens=load_screens()
        show_dict={}
        for screen in screens:
            showlst=[]
            for show in screen.shows:
                title=screen.shows[show].title
                starting_time=show.starting_time
                date=show.date
                showlst.append({"movie":title,"date":date,"starting_time":starting_time,"seat ids":screen.seats})
            show_dict[screen.screen_id]=showlst
        for screen_id, shows in show_dict.items():
            print(f"Screen ID: {screen_id}")
            for show in shows:
                print("Movie:",show['movie'])
                print("Date:",show['date'])
                print("Starting Time:", show['starting_time'])
                print("Seat IDs:", show['seat ids'])
                print() 

    def book_show(self): #creates a new entry of an instance of booking created with complete verification in bookings list 
        users = load_users()
        screens = load_screens()
        screen_id = input("Enter screen id: ")
        movie_title = input("Enter movie title: ")
        seat_id = input("Enter seat id: ")
        starting_time = input("Enter starting time: ")
        date = input("Enter date: ")
        for screen in screens:
            if screen_id == screen.screen_id and seat_id in screen.seats:
                for show in screen.shows:
                    if (
                        show.starting_time == starting_time
                        and show.date == date
                        and screen.shows[show].title == movie_title
                    ):
                        booking = Booking(screen_id, movie_title, seat_id, starting_time, date)
                        for user in users:
                            if booking in user.bookings:
                                print("Booking already exists")
                                break
                        else:
                            for user in users:
                                if user.__dict__ == self.__dict__:
                                    users.remove(user)
                            self.bookings.append(booking)
                            print("Seat booked successfully with id:", booking.booking_id)
                        break 
                else:
                    print("Show not found")
                break
        else:
            print("Screen not found")
        users.append(self)
        save_users(users)

    def display_booking(self): #prints the dict dunder function of each booking from the list of bookings
        if not self.bookings:
            print("No bookings found.")
            return
        print("Bookings:")
        for booking in self.bookings:
            print(booking.__dict__)

    def remove_booking(self): #removes the booking from the booking list of user by checking its unique booking id
        users=load_users()
        booking_id=input("Enter booking ID: ")
        for booking in self.bookings:
            if booking.booking_id==booking_id:
                for user in users:
                    if user.__dict__ == self.__dict__:
                        users.remove(user)
                self.bookings.remove(booking)
        users.append(self)
        save_users(users)
class Admin(User): #admin inherits all attributes from parent user class except booking list
    def __init__(self, username, password, conf_question, conf_answer):
        super().__init__(username, password, conf_question, conf_answer)

    def display_shows(self): #dispays show by inheriting method from the parent class user
        return super().display_shows()
 
    def display_screens(self): #displays the list of screens with their complete attributes
        screens=load_screens()
        for screen in screens:
            print(screen.screen_id)
            print(screen.seats)
            print(screen.shows)

    def add_show(self): #adds show to the list of shows present within a screen via screen class method add show
        screens=load_screens()
        screen_id=input("enter screen id: ")
        for screen in screens:
            if screen.screen_id==screen_id:
                title=input("enter movie title: ")
                starting_time=input("enter starting time: ")
                ending_time=input("enter ending time: ")
                date=input("enter date: ")
                for screen in screens:
                    if screen.__dict__ == self.__dict__:
                        screens.remove(screen)
                        break
        screen.add_show(title,starting_time,ending_time,date)
        save_screens(screens)
        print("Show added successfully.")

    def remove_show(self): #removes the show from the list of shows present within a screen by creating a new instance and comparing its dict dunder with the instances present within the show list
        screens = load_screens()
        screen_id = input("Enter screen id: ")
        title = input("Enter movie title: ")
        starting_time = input("Enter starting time: ")
        ending_time=input("Enter ending time: ")
        date = input("Enter date: ")
        timeslot1=Timeslot(starting_time,ending_time,date)
        movie1=Movie(title)
        for screen in screens:
            if screen.screen_id==screen_id:
                for timeslot,movie in screen.shows.items():
                    if timeslot.__dict__== timeslot1.__dict__ and movie.__dict__==movie1.__dict__:
                        screens.remove(screen)
                        screen.shows.pop(timeslot)
                        screens.append(screen)
                        print("Show removed successfully")
                        break
        save_screens(screens)

    def add_screen(self): #creates new instance of screen and adds it to the screen instance list file
        while True:
            screens=load_screens()
            screen_id = input("Enter screen id: ")
            if any(screen.screen_id == screen_id for screen in screens):
                print("screen id already exists. Try another one.")
                continue
            no_seats = int(input("Enter number of seats: "))
            seats = [str(i) for i in range(0,no_seats)]
            new_screen = Screen(screen_id,seats)
            break
        screens.append(new_screen)
        save_screens(screens)
        print("screen addition successful")
        return screens    
    
    def remove_screen(self): #removes screen instance by id comparison
        screens=load_screens()
        screen_id=input("enter screen id: ")
        for screen in screens:
            if screen.screen_id==screen_id:
                screens.remove(screen)
        save_screens(screens)
class Movie:    #class defined for movie with attribute title
    def __init__(self,title):
        self.title=title
    def __repr__(self): #repr dunder return the dict dunder as a string
        return str(self.__dict__)
class Timeslot: #class defined for timeslot with attributes date and starting and ending times
    def __init__(self,starting_time,ending_time,date):
        self.starting_time=starting_time
        self.ending_time=ending_time
        self.date=date
    def __repr__(self): #repr dunder return the dict dunder as a string
        return str(self.__dict__)
class Screen: #screen class defined with seat list, an empty show dict and a screen id
    def __init__(self,screen_id,seats):
        self.screen_id=screen_id 
        self.seats=seats
        self.shows={}
    def add_show(self,title,starting_time,ending_time,date): #creates new entry in show dict for movie instance at timeslot instance
        self.shows[Timeslot(starting_time,ending_time,date)]=Movie(title)

class Booking: #booking class defined with only the necesissary attributes for ease of use
    def __init__(self,screen_id,movie_title,seat_id,starting_time,date):
        self.booking_id=screen_id+date+starting_time
        self.screen_id=screen_id
        self.movie_title=movie_title
        self.seat_id=seat_id
        self.starting_time=starting_time
        self.date=date

    def __eq__(self, other): #eq dunder defined for in function
        if isinstance(other,Booking):
            return self.screen_id==other.screen_id and self.movie_title==other.movie_title and self.seat_id==other.seat_id and self.starting_time==other.starting_time and self.date==other.date
        

def admin_menu(admin): #admin ui defined
    while True:
        print("Admin Menu:")
        print("1 - Display Screens")
        print("2 - Display Shows")
        print("3 - Add Show")
        print("4 - Add Screen")
        print("5 - Remove Show")
        print("6 - Remvoe Screen")
        print("7 - Logout")
        choice = input("Enter your choice: ")
        if choice == "1":
            admin.display_screens()
        elif choice == "2":
            admin.display_shows()
        elif choice == "3":
            admin.add_show()
        elif choice == "4":
            admin.add_screen()
        elif choice == "5":
            admin.remove_show()
        elif choice == "6":
            admin.remove_screen()
        elif choice == "7":
            print("Logging out as admin")
            break
        else:
            print("Invalid choice. Please try again.")

def user_menu(user): #user ui defined
    while True:
        print("User Menu:")
        print("1 - Display Shows")
        print("2 - Book Show")
        print("3 - Display Bookings")
        print("4 - Cancel Booking")
        print("5 - Logout")
        choice = input("Enter your choice: ")
        if choice == "1":
            user.display_shows()
        elif choice == "2":
            user.book_show()
        elif choice == "3":
            user.display_booking()
        elif choice == "4":
            user.remove_booking()
        elif choice == "5":
            print("Logging out as user")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__": #driver code
    users = load_users()
    screens = load_screens()
    while True:
        choice = input("Choose an option:\n1 - Login,\n2 - Sign Up,\n3 - Forgot password,\n4 - Exit\n")
        if choice == "1":
            logged_in_user = login(users)
            if logged_in_user:
                print("Login successful")
                if isinstance(logged_in_user, Admin):
                    admin_menu(logged_in_user)
                else:
                    user_menu(logged_in_user)
            else:
                print("Login failed")
        elif choice == "2":
            signup(users)
        elif choice == "3":
            forgot_password(users)
        elif choice == "4":
            print("Exiting program")
            break
